#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_GOUSMAS 2 // Por jogador 
#define FURIA_MAX 5   // Por gousmas 

typedef struct {
    int furia;
    int ativa;
} Gousma;

typedef struct {
    Gousma gousmas[MAX_GOUSMAS]; 
} Jogador;

void inicializar_jogador(Jogador *jogador) {
    for (int i = 0; i < MAX_GOUSMAS; i++) {
        jogador->gousmas[i].furia = 1;
        jogador->gousmas[i].ativa = 1;
    }
}

void mostrar_estado(Jogador *jogador1, Jogador *jogador2) {
    printf("\nEstado Atual:\n");
    printf("Jogador 1: ");
    for (int i = 0; i < MAX_GOUSMAS; i++) {
        printf("[Gousma %d: %s Furia %d] ", i + 1, jogador1->gousmas[i].furia > 0 ? "Ativa" : "Morta", jogador1->gousmas[i].furia);
    }
    printf("\nJogador 2: ");
    for (int i = 0; i < MAX_GOUSMAS; i++) {
        printf("[Gousma %d: %s Furia %d] ", i + 1, jogador2->gousmas[i].furia > 0 ? "Ativa" : "Morta", jogador2->gousmas[i].furia);
    }
    printf("\n\n");
}

void atacar(Jogador *atacante, Jogador *defensor, int id_atacante, int id_defensor) {
    if (atacante->gousmas[id_atacante].furia <= 0 || defensor->gousmas[id_defensor].furia <= 0) {
        printf("Ataque inválido!\n");
        return;
    }
    
    defensor->gousmas[id_defensor].furia += atacante->gousmas[id_atacante].furia;
    printf("Ataque realizado!\n");
    
    if (defensor->gousmas[id_defensor].furia > FURIA_MAX) {
        defensor->gousmas[id_defensor].furia = 0;
        printf("Gousma %d do defensor morreu!\n", id_defensor + 1);
    }
}

void transferir_furia(Gousma *gousma1, Gousma *gousma2) {
    if (gousma1->furia <= 0) {
        printf("Transferência impossível!\n");
        return;
    }
    
    int quantidade;
    printf("Digite a quantidade de fúria para transferir: ");
    if (scanf("%d", &quantidade) != 1 || quantidade <= 0 || quantidade > gousma1->furia) {
        printf("Quantidade inválida!\n");
        while (getchar() != '\n'); // Limpa o buffer
        return;
    }
    
    gousma1->furia -= quantidade;
    gousma2->furia += quantidade;
    printf("Transferência realizada com sucesso!\n");
}

int verificar_derrota(Jogador *jogador) {
    return (jogador->gousmas[0].furia == 0 && jogador->gousmas[1].furia == 0);
}

void jogar() {
    Jogador jogador1, jogador2;
    inicializar_jogador(&jogador1);
    inicializar_jogador(&jogador2);
    
    int turno = 1;
    while (1) {
        mostrar_estado(&jogador1, &jogador2);
        
        printf("Turno do Jogador %d. Escolha uma ação:\n", turno);
        printf("1 - Atacar\n2 - Transferir Fúria\n3 - Sair\n");
        int opcao, id_origem, id_destino;
        
        if (scanf("%d", &opcao) != 1) {
            printf("Entrada inválida!\n");
            while (getchar() != '\n'); 
            continue;
        }
        
        if (opcao == 1) {
            printf("Escolha sua Gousma (1 ou 2): ");
            if (scanf("%d", &id_origem) != 1 || id_origem < 1 || id_origem > MAX_GOUSMAS) {
                printf("Entrada inválida!\n");
                while (getchar() != '\n');
                continue;
            }
            printf("Escolha a Gousma do oponente para atacar (1 ou 2): ");
            if (scanf("%d", &id_destino) != 1 || id_destino < 1 || id_destino > MAX_GOUSMAS) {
                printf("Entrada inválida!\n");
                while (getchar() != '\n');
                continue;
            }
            atacar(turno == 1 ? &jogador1 : &jogador2, turno == 1 ? &jogador2 : &jogador1, id_origem - 1, id_destino - 1);
        } else if (opcao == 2) {
            printf("Escolha a Gousma de origem (1 ou 2): ");
            if (scanf("%d", &id_origem) != 1 || id_origem < 1 || id_origem > MAX_GOUSMAS) {
                printf("Entrada inválida!\n");
                while (getchar() != '\n');
                continue;
            }
            printf("Escolha a Gousma de destino (1 ou 2): ");
            if (scanf("%d", &id_destino) != 1 || id_destino < 1 || id_destino > MAX_GOUSMAS || id_origem == id_destino) {
                printf("Entrada inválida!\n");
                while (getchar() != '\n');
                continue;
            }
            transferir_furia(&(turno == 1 ? jogador1 : jogador2).gousmas[id_origem - 1], &(turno == 1 ? jogador1 : jogador2).gousmas[id_destino - 1]);
        } else if (opcao == 3) {
            printf("Jogo encerrado!\n");
            break;
        }
        
        if (verificar_derrota(&jogador1)) {
            printf("Jogador 2 venceu!\n");
            break;
        }
        if (verificar_derrota(&jogador2)) {
            printf("Jogador 1 venceu!\n");
            break;
        }
        
        turno = (turno == 1) ? 2 : 1;
    }
}

int main() {
    int opcao;
    while (1) {
        printf("\nGousmas War - Menu Principal\n");
        printf("1 - Jogar\n2 - Sair\n");
        if (scanf("%d", &opcao) != 1) {
            printf("Entrada inválida!\n");
            while (getchar() != '\n');
            continue;
        }
        if (opcao == 1) {
            jogar();
        } else {
            break;
        }
    }
    return 0;
}
